import requests
import nest_asyncio
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler
from telegram.ext import ConversationHandler

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
FROM, AMOUNT, TO = range(3)

TOKEN = "Token"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ú–æ—Ä–æ–∑–∞!")

async def convert_button_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("USD", callback_data="USD"),
         InlineKeyboardButton("EUR", callback_data="EUR")],
        [InlineKeyboardButton("PLN", callback_data="PLN"),
         InlineKeyboardButton("CAD", callback_data="CAD")],
        [InlineKeyboardButton("UAH", callback_data="UAH")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, **–∏–∑ –∫–æ—Ç–æ—Ä–æ–π** —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=reply_markup)
    return FROM

async def from_currency_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["from_currency"] = query.data
    await query.edit_message_text(f"–í–∞–ª—é—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {query.data}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

    return AMOUNT

async def amount_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return AMOUNT

    context.user_data["amount"] = amount

    keyboard = [
        [InlineKeyboardButton("USD", callback_data="USD"),
         InlineKeyboardButton("EUR", callback_data="EUR")],
        [InlineKeyboardButton("PLN", callback_data="PLN"),
         InlineKeyboardButton("CAD", callback_data="CAD")],
        [InlineKeyboardButton("UAH", callback_data="UAH")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, **–≤ –∫–æ—Ç–æ—Ä—É—é** —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=reply_markup)
    return TO

async def to_currency_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    from_currency = context.user_data["from_currency"]
    to_currency = query.data
    amount = context.user_data["amount"]

    if from_currency not in RATES or to_currency not in RATES:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞.")
        return ConversationHandler.END

    uah = amount * RATES[from_currency]
    result = uah / RATES[to_currency]

    await query.edit_message_text(
        f"{amount} {from_currency} = {round(result, 2)} {to_currency}\n"
        f"(–∫—É—Ä—Å: {round(RATES[from_currency], 2)} ‚Üí {round(RATES[to_currency], 2)})"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

from telegram.ext import ConversationHandler, MessageHandler, filters

async def new_conversion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("USD", callback_data="USD"),
         InlineKeyboardButton("EUR", callback_data="EUR")],
        [InlineKeyboardButton("PLN", callback_data="PLN"),
         InlineKeyboardButton("CAD", callback_data="CAD")],
        [InlineKeyboardButton("UAH", callback_data="UAH")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, **–∏–∑ –∫–æ—Ç–æ—Ä–æ–π** —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:", reply_markup=reply_markup)
    return FROM

async def repeat_conversion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = context.user_data.get("last_conversion")

    if not data:
        await query.edit_message_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
        return

    from_currency = data["from"]
    to_currency = data["to"]
    amount = data["amount"]

    if from_currency not in RATES or to_currency not in RATES:
        await query.edit_message_text("–û–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∞.")
        return

    uah = amount * RATES[from_currency]
    result = uah / RATES[to_currency]

    await query.edit_message_text(
        f"üîÅ –ü–æ–≤—Ç–æ—Ä:\n"
        f"{amount} {from_currency} = {round(result, 2)} {to_currency}\n"
        f"(–∫—É—Ä—Å: {round(RATES[from_currency], 2)} ‚Üí {round(RATES[to_currency], 2)})"
    )

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("convert_button", convert_button_start)],
    states={
        FROM: [CallbackQueryHandler(from_currency_chosen)],
        AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_received)],
        TO: [
            CallbackQueryHandler(to_currency_chosen),
            CallbackQueryHandler(new_conversion, pattern="^new_convert$"),  # ‚úÖ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ —Å—é–¥–∞
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

async def to_currency_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    from_currency = context.user_data["from_currency"]
    to_currency = query.data
    amount = context.user_data["amount"]

    if from_currency not in RATES or to_currency not in RATES:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞.")
        return ConversationHandler.END

    uah = amount * RATES[from_currency]
    result = uah / RATES[to_currency]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    context.user_data["last_conversion"] = {
        "from": from_currency,
        "to": to_currency,
        "amount": amount
    }

    # –ö–Ω–æ–ø–∫–∏: –ü–æ–≤—Ç–æ—Ä–∏—Ç—å / –ù–æ–≤–∞—è
    keyboard = [
        [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat")],
        [InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", callback_data="new_convert")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"{amount} {from_currency} = {round(result, 2)} {to_currency}\n"
        f"(–∫—É—Ä—Å: {round(RATES[from_currency], 2)} ‚Üí {round(RATES[to_currency], 2)})",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def choose_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("USD", callback_data='USD'),
            InlineKeyboardButton("EUR", callback_data='EUR'),
        ],
        [
            InlineKeyboardButton("PLN", callback_data='PLN'),
            InlineKeyboardButton("AUD", callback_data='AUD'),
        ],
        [
            InlineKeyboardButton("CAD", callback_data='CAD'),
            InlineKeyboardButton("UAH", callback_data='UAH'),
        ],
        [
            InlineKeyboardButton("THB", callback_data='THB'),
            InlineKeyboardButton("AZN", callback_data='AZN'),
        ],
        
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram API

    selected_currency = query.data

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    response = requests.get(url)
    data = response.json()

    # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É
    rate = None
    for item in data:
        if item["cc"] == selected_currency:
            rate = item["rate"]
            break

    if rate:
        await query.edit_message_text(f"–ö—É—Ä—Å {selected_currency}: {rate} ‚Ç¥")
    else:
        await query.edit_message_text("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


async def currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    response = requests.get(url)
    data = response.json()

    target_currencies = {
        "USD": "–î–æ–ª–∞—Ä –°–®–ê",
        "EUR": "–Ñ–≤—Ä–æ",
        "AUD": "–ê–≤—Å—Ç—Ä–∞–ª—ñ–π—Å—å–∫–∏–π –¥–æ–ª–∞—Ä",
        "PLN": "–ó–ª–æ—Ç–∏–π",
        "CAD": "–ö–∞–Ω–∞–¥—Å—å–∫–∏–π –¥–æ–ª–∞—Ä",
        "AZN": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å—å–∫–∏–π –º–∞–Ω–∞—Ç",
        "DZD": "–ê–ª–∂–∏—Ä—Å—å–∫–∏–π –¥–∏–Ω–∞—Ä",
        "THB": "–ë–∞—Ç",
        "BGN": "–ë–æ–ª–≥–∞—Ä—Å—å–∫–∏–π –ª–µ–≤"
        }
    
    result = "üìä –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –ù–ë–£:\n\n"


    for code in target_currencies:
        if code in RATES:
            name = target_currencies[code]
            rate = RATES[code]
            result += f"{name} ({code}): {rate} ‚Ç¥\n"

    await update.message.reply_text(result)

async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /convert <—Å—É–º–º–∞> <–∏–∑> <–≤>")
        return

    try:
        amount = float(args[0])
        from_currency = args[1].upper()
        to_currency = args[2].upper()
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    if from_currency not in RATES or to_currency not in RATES:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞.")
        return

    uah = amount * RATES[from_currency]
    result = uah / RATES[to_currency]

    await update.message.reply_text(
        f"{amount} {from_currency} = {round(result, 2)} {to_currency} "
        f"(–∫—É—Ä—Å: {round(RATES[from_currency], 2)} ‚Üí {round(RATES[to_currency], 2)})"
)
    
RATES = {"UAH": 1.0}

async def update_rates_daily():
    global RATES  # —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ö–æ—Ç–∏–º –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    while True:  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
            response = requests.get("https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json")
            data = response.json()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å RATES
            RATES = {"UAH": 1.0}  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∏–≤–Ω—É
            for item in data:
                RATES[item["cc"]] = item["rate"]

            print("‚úÖ –ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:", e)

        await asyncio.sleep(86400)  # –∂–¥–∞—Ç—å 86400 —Å–µ–∫—É–Ω–¥ = 1 –¥–µ–Ω—å

app = ApplicationBuilder().token(TOKEN).build()

async def main():
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("currency", currency))
    app.add_handler(CommandHandler("convert", convert))
    app.add_handler(CommandHandler("choose", choose_currency))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(repeat_conversion, pattern="^repeat$"))
    app.add_handler(CallbackQueryHandler(new_conversion, pattern="^new_convert$"))
    app.add_handler(CallbackQueryHandler(button_handler))
    

    asyncio.create_task(update_rates_daily())

    await app.run_polling()

nest_asyncio.apply()

asyncio.get_event_loop().run_until_complete(main())